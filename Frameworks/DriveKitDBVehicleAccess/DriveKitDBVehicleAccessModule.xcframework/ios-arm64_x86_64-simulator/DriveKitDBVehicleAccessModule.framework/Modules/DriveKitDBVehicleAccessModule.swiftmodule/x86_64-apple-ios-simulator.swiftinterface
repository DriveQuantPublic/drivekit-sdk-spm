// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.19.9 clang-1700.3.19.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name DriveKitDBVehicleAccessModule
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import CoreData
import DriveKitBeaconUtilsModule
import DriveKitCoreModule
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public class DKBluetooth : ObjectiveC.NSObject {
  final public let name: Swift.String
  final public let macAddress: Swift.String
  @objc public init(name: Swift.String, macAddress: Swift.String)
  @objc deinit
}
extension DriveKitDBVehicleAccessModule.DBBluetooth : DriveKitCoreModule.DKUnmanagedObject {
  nonisolated public func convertToUnmanagedObject<T>() -> T
}
@_hasMissingDesignatedInitializers @objc public class DKVehicleOdometerHistory : ObjectiveC.NSObject {
  @objc final public let historyId: Swift.Int
  @objc final public let analyzedDistance: Swift.Double
  @objc final public let distance: Swift.Double
  @objc final public let offsetDistance: Swift.Double
  @objc final public let realDistance: Swift.Double
  @objc final public let updateDate: Foundation.Date?
  @objc final public let yearAnalyzedDistance: Swift.Double
  @objc deinit
}
extension DriveKitDBVehicleAccessModule.DBOdometerHistory : DriveKitCoreModule.DKUnmanagedObject {
  nonisolated public func convertToUnmanagedObject<T>() -> T
}
@_hasMissingDesignatedInitializers @objc public class DKVehicle : ObjectiveC.NSObject {
  @objc final public let vehicleId: Swift.String
  @objc final public let name: Swift.String?
  @objc final public let brand: Swift.String?
  @objc final public let model: Swift.String?
  @objc final public let version: Swift.String?
  @objc final public let year: Swift.String?
  final public let typeIndex: Swift.Int?
  @objc final public let engineIndex: Swift.Int
  @objc final public let power: Swift.Double
  @objc final public let mass: Swift.Double
  final public let ptac: Swift.Double?
  @objc final public let consumption: Swift.Double
  @objc final public let autoGearboxNumber: Swift.Int
  @objc final public let engineDisplacement: Swift.Double
  @objc final public let gearboxIndex: Swift.Int
  @objc final public let dqIndex: Swift.String?
  @objc final public let frontTireSize: Swift.String?
  @objc final public let rearTireSize: Swift.String?
  final public let length: Swift.Double?
  final public let width: Swift.Double?
  final public let height: Swift.Double?
  @objc final public let engineCylinderNb: Swift.Int
  @objc final public let driveWheels: Swift.Int
  final public let detectionMode: DriveKitDBVehicleAccessModule.DKDetectionMode?
  @objc final public let liteConfig: Swift.Bool
  @objc final public let beacon: DriveKitBeaconUtilsModule.DKBeacon?
  @objc final public let bluetooth: DriveKitDBVehicleAccessModule.DKBluetooth?
  @objc final public let odometer: DriveKitDBVehicleAccessModule.DKVehicleOdometer?
  @objc final public let odometerHistories: [DriveKitDBVehicleAccessModule.DKVehicleOdometerHistory]?
  @objc final public let extraData: [Swift.String : Swift.String]
  @objc deinit
}
extension DriveKitDBVehicleAccessModule.DBVehicle : DriveKitCoreModule.DKUnmanagedObject {
  nonisolated public func convertToUnmanagedObject<T>() -> T
}
@_hasMissingDesignatedInitializers @objc public class DKVehicleOdometer : ObjectiveC.NSObject {
  @objc final public let analyzedDistance: Swift.Double
  @objc final public let distance: Swift.Double
  @objc final public let estimatedYearDistance: Swift.Double
  @objc final public let estimatedYearNbTrip: Swift.Int
  @objc final public let offsetDistance: Swift.Double
  @objc final public let realDistance: Swift.Double
  @objc final public let yearAnalyzedDistance: Swift.Double
  @objc final public let updateDate: Foundation.Date?
  @objc deinit
}
extension DriveKitDBVehicleAccessModule.DBOdometer : DriveKitCoreModule.DKUnmanagedObject {
  nonisolated public func convertToUnmanagedObject<T>() -> T
}
extension DriveKitDBVehicleAccessModule.DBBeacon : DriveKitCoreModule.DKUnmanagedObject {
  nonisolated public func convertToUnmanagedObject<T>() -> T
}
public protocol DKVehicleUpdatedDelegate {
  func onVehicleUpdated()
}
@_hasMissingDesignatedInitializers public class DriveKitDBVehicleAccess {
  public static let sdkVersion: Swift.String
  public static let shared: DriveKitDBVehicleAccessModule.DriveKitDBVehicleAccess
  public func reset()
  public func vehiclesQuery() -> DriveKitCoreModule.WhereReference<DriveKitDBVehicleAccessModule.DBVehicle, DriveKitDBVehicleAccessModule.DKVehicle>
  public func delete(vehicleId: Swift.String, notify: Swift.Bool = false)
  #if compiler(>=5.3) && $NonescapableTypes
  public func findManaged(vehicleId: Swift.String) -> DriveKitDBVehicleAccessModule.DBVehicle?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func find(vehicleId: Swift.String) -> DriveKitDBVehicleAccessModule.DKVehicle?
  #endif
  public func findVehiclesByDetectionMode(detectionMode: Swift.String) -> DriveKitCoreModule.ExecutableQuery<DriveKitDBVehicleAccessModule.DBVehicle, DriveKitDBVehicleAccessModule.DKVehicle>
  public func findVehiclesOrderByNameAsc() -> DriveKitCoreModule.ExecutableQuery<DriveKitDBVehicleAccessModule.DBVehicle, DriveKitDBVehicleAccessModule.DKVehicle>
  public func findVehicles() -> DriveKitCoreModule.ExecutableQuery<DriveKitDBVehicleAccessModule.DBVehicle, DriveKitDBVehicleAccessModule.DKVehicle>
  public func update(notify: Swift.Bool = true, block: (CoreData.NSManagedObjectContext) -> Swift.Void)
  public func createNewVehicle(vehicleId: Swift.String, block: (CoreData.NSManagedObjectContext) -> Swift.Void)
  public func registerVehicleUpdatedDelegate(identifier: Swift.String, delegate: any DriveKitDBVehicleAccessModule.DKVehicleUpdatedDelegate)
  public func unregisterVehicleUpdatedDelegate(identifier: Swift.String)
  public func notifyOnVehicleUpdate()
  @objc deinit
}
extension DriveKitDBVehicleAccessModule.DBVehicle {
  nonisolated public func save(notify: Swift.Bool = false)
}
@objc public enum DKDetectionMode : Swift.Int {
  case gps
  case disabled
  case beacon
  case bluetooth
  public var value: Swift.String {
    get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.Int)
  #endif
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension DriveKitDBVehicleAccessModule.DKDetectionMode {
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(value: Swift.String)
  #endif
}
public typealias DBBeaconCoreDataClassSet = Foundation.NSSet
@_inheritsConvenienceInitializers @objc(DBBeacon) nonisolated public class DBBeacon : CoreData.NSManagedObject {
  #if compiler(>=5.3) && $NonescapableTypes
  @objc override nonisolated dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  #endif
  @objc deinit
}
public typealias DBBeaconCoreDataPropertiesSet = Foundation.NSSet
extension DriveKitDBVehicleAccessModule.DBBeacon {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<DriveKitDBVehicleAccessModule.DBBeacon>
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var code: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  @objc @NSManaged nonisolated dynamic public var major: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged nonisolated dynamic public var minor: Swift.Int32 {
    @objc get
    @objc set
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var proximityUuid: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var vehicle: DriveKitDBVehicleAccessModule.DBVehicle? {
    @objc get
    @objc set
  }
  #endif
}
extension DriveKitDBVehicleAccessModule.DBBeacon : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
public typealias DBBluetoothCoreDataClassSet = Foundation.NSSet
@_inheritsConvenienceInitializers @objc(DBBluetooth) nonisolated public class DBBluetooth : CoreData.NSManagedObject {
  #if compiler(>=5.3) && $NonescapableTypes
  @objc override nonisolated dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  #endif
  @objc deinit
}
public typealias DBBluetoothCoreDataPropertiesSet = Foundation.NSSet
extension DriveKitDBVehicleAccessModule.DBBluetooth {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<DriveKitDBVehicleAccessModule.DBBluetooth>
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var macAddress: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var vehicle: DriveKitDBVehicleAccessModule.DBVehicle? {
    @objc get
    @objc set
  }
  #endif
}
extension DriveKitDBVehicleAccessModule.DBBluetooth : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
public typealias DBExtraDataCoreDataClassSet = Foundation.NSSet
@_inheritsConvenienceInitializers @objc(DBExtraData) nonisolated public class DBExtraData : CoreData.NSManagedObject {
  #if compiler(>=5.3) && $NonescapableTypes
  @objc override nonisolated dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  #endif
  @objc deinit
}
public typealias DBExtraDataCoreDataPropertiesSet = Foundation.NSSet
extension DriveKitDBVehicleAccessModule.DBExtraData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<DriveKitDBVehicleAccessModule.DBExtraData>
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var key: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var value: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var vehicle: DriveKitDBVehicleAccessModule.DBVehicle? {
    @objc get
    @objc set
  }
  #endif
}
extension DriveKitDBVehicleAccessModule.DBExtraData : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
public typealias DBOdometerCoreDataClassSet = Foundation.NSSet
@_inheritsConvenienceInitializers @objc(DBOdometer) nonisolated public class DBOdometer : CoreData.NSManagedObject {
  #if compiler(>=5.3) && $NonescapableTypes
  @objc override nonisolated dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  #endif
  @objc deinit
}
public typealias DBOdometerCoreDataPropertiesSet = Foundation.NSSet
extension DriveKitDBVehicleAccessModule.DBOdometer {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<DriveKitDBVehicleAccessModule.DBOdometer>
  @objc @NSManaged nonisolated dynamic public var analyzedDistance: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged nonisolated dynamic public var distance: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged nonisolated dynamic public var estimatedYearDistance: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged nonisolated dynamic public var estimatedYearNbTrip: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged nonisolated dynamic public var offsetDistance: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged nonisolated dynamic public var realDistance: Swift.Double {
    @objc get
    @objc set
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var updateDate: Foundation.Date? {
    @objc get
    @objc set
  }
  #endif
  @objc @NSManaged nonisolated dynamic public var yearAnalyzedDistance: Swift.Double {
    @objc get
    @objc set
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var vehicle: DriveKitDBVehicleAccessModule.DBVehicle? {
    @objc get
    @objc set
  }
  #endif
}
extension DriveKitDBVehicleAccessModule.DBOdometer : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
public typealias DBOdometerHistoryCoreDataClassSet = Foundation.NSSet
@_inheritsConvenienceInitializers @objc(DBOdometerHistory) nonisolated public class DBOdometerHistory : CoreData.NSManagedObject {
  #if compiler(>=5.3) && $NonescapableTypes
  @objc override nonisolated dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  #endif
  @objc deinit
}
public typealias DBOdometerHistoryCoreDataPropertiesSet = Foundation.NSSet
extension DriveKitDBVehicleAccessModule.DBOdometerHistory {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<DriveKitDBVehicleAccessModule.DBOdometerHistory>
  @objc @NSManaged nonisolated dynamic public var analyzedDistance: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged nonisolated dynamic public var distance: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged nonisolated dynamic public var historyId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged nonisolated dynamic public var offsetDistance: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged nonisolated dynamic public var realDistance: Swift.Double {
    @objc get
    @objc set
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var updateDate: Foundation.Date? {
    @objc get
    @objc set
  }
  #endif
  @objc @NSManaged nonisolated dynamic public var yearAnalyzedDistance: Swift.Double {
    @objc get
    @objc set
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var vehicle: DriveKitDBVehicleAccessModule.DBVehicle? {
    @objc get
    @objc set
  }
  #endif
}
extension DriveKitDBVehicleAccessModule.DBOdometerHistory : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
public typealias DBVehicleCoreDataClassSet = Foundation.NSSet
@_inheritsConvenienceInitializers @objc(DBVehicle) nonisolated public class DBVehicle : CoreData.NSManagedObject {
  #if compiler(>=5.3) && $NonescapableTypes
  @objc override nonisolated dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  #endif
  @objc deinit
}
public typealias DBVehicleCoreDataPropertiesSet = Foundation.NSSet
extension DriveKitDBVehicleAccessModule.DBVehicle {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<DriveKitDBVehicleAccessModule.DBVehicle>
  @objc @NSManaged nonisolated dynamic public var autoGearboxNumber: Swift.Int32 {
    @objc get
    @objc set
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var brand: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  @objc @NSManaged nonisolated dynamic public var consumption: Swift.Double {
    @objc get
    @objc set
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var detectionMode: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var dqIndex: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  @objc @NSManaged nonisolated dynamic public var driveWheels: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged nonisolated dynamic public var engineCylinderNb: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged nonisolated dynamic public var engineDisplacement: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged nonisolated dynamic public var engineIndex: Swift.Int32 {
    @objc get
    @objc set
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var frontTireSize: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  @objc @NSManaged nonisolated dynamic public var gearboxIndex: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged nonisolated dynamic public var height: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged nonisolated dynamic public var length: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged nonisolated dynamic public var liteConfig: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged nonisolated dynamic public var mass: Swift.Double {
    @objc get
    @objc set
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var model: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  @objc @NSManaged nonisolated dynamic public var power: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged nonisolated dynamic public var ptac: Swift.Double {
    @objc get
    @objc set
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var rearTireSize: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  @objc @NSManaged nonisolated dynamic public var typeIndex: Swift.Int32 {
    @objc get
    @objc set
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var vehicleId: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var version: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  @objc @NSManaged nonisolated dynamic public var width: Swift.Double {
    @objc get
    @objc set
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var year: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var beacon: DriveKitDBVehicleAccessModule.DBBeacon? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var bluetooth: DriveKitDBVehicleAccessModule.DBBluetooth? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var extraData: Foundation.NSSet? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var odometer: DriveKitDBVehicleAccessModule.DBOdometer? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc @NSManaged nonisolated dynamic public var odometerHistories: Foundation.NSSet? {
    @objc get
    @objc set
  }
  #endif
}
extension DriveKitDBVehicleAccessModule.DBVehicle {
  @objc(addExtraDataObject:) @NSManaged nonisolated dynamic public func addToExtraData(_ value: DriveKitDBVehicleAccessModule.DBExtraData)
  @objc(removeExtraDataObject:) @NSManaged nonisolated dynamic public func removeFromExtraData(_ value: DriveKitDBVehicleAccessModule.DBExtraData)
  @objc(addExtraData:) @NSManaged nonisolated dynamic public func addToExtraData(_ values: Foundation.NSSet)
  @objc(removeExtraData:) @NSManaged nonisolated dynamic public func removeFromExtraData(_ values: Foundation.NSSet)
}
extension DriveKitDBVehicleAccessModule.DBVehicle {
  @objc(addOdometerHistoriesObject:) @NSManaged nonisolated dynamic public func addToOdometerHistories(_ value: DriveKitDBVehicleAccessModule.DBOdometerHistory)
  @objc(removeOdometerHistoriesObject:) @NSManaged nonisolated dynamic public func removeFromOdometerHistories(_ value: DriveKitDBVehicleAccessModule.DBOdometerHistory)
  @objc(addOdometerHistories:) @NSManaged nonisolated dynamic public func addToOdometerHistories(_ values: Foundation.NSSet)
  @objc(removeOdometerHistories:) @NSManaged nonisolated dynamic public func removeFromOdometerHistories(_ values: Foundation.NSSet)
}
extension DriveKitDBVehicleAccessModule.DBVehicle : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
public typealias VehicleFoundationFrameworkSet = Foundation.NSSet
public typealias VehicleCoreDataFrameworkManagedObject = CoreData.NSManagedObject
extension DriveKitDBVehicleAccessModule.DKDetectionMode : Swift.Equatable {}
extension DriveKitDBVehicleAccessModule.DKDetectionMode : Swift.Hashable {}
extension DriveKitDBVehicleAccessModule.DKDetectionMode : Swift.RawRepresentable {}
